generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  customer_id     String    @id @default(dbgenerated("gen_random_uuid()"))
  customer_email  String
  password        String
  age             Int
  address         String
  phone_number    BigInt    @db.BigInt
  profile_picture String
  customer_name   String
  searchhistory   history[]
  review          review[]
  request         request[]
}

model Serviceprovider {
  serviceprovider_id              String    @id @default(dbgenerated("gen_random_uuid()"))
  serviceprovider_email           String
  password                        String
  age                             Int
  address                         String
  phone_number                    BigInt
  profile_picture                 String
  gstregistration_number          String
  chargers_for_particular_service Int
  specialisation                  String
  serviceprovider_name            String
  service_name                    String
  searchhistory                   history[]
  service                         service[]
  review                          review[]

  request request[]
}

model service {
  service_name       String
  service_id         String          @id @default(dbgenerated("gen_random_uuid()"))
  service            Serviceprovider @relation(fields: [serviceprovider_id], references: [serviceprovider_id])
  serviceprovider_id String
  history            history[]
  review             review[]
  request            request[]
}

model history {
  date               DateTime
  customer           Customer        @relation(fields: [customer_id], references: [customer_id])
  customer_id        String
  search             Serviceprovider @relation(fields: [serviceprovider_id], references: [serviceprovider_id])
  serviceprovider_id String
  searching          service         @relation(fields: [service_id], references: [service_id])
  service_id         String          @unique
}

model review {
  customer       Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id    String
  review_id      String  @id @default(dbgenerated("gen_random_uuid()"))
  service        service  @relation(fields: [service_id], references: [service_id])
  service_id     String
  rating         Float
  review_content String
  created_at     DateTime @default(dbgenerated("now()")) @db.Timestamptz()
  serviceProvider         Serviceprovider @relation(fields: [serviceprovider_id], references: [serviceprovider_id])
  serviceprovider_id String
}

model request {
  booking_id            String          @id @default(dbgenerated("gen_random_uuid()"))
  reasons_for_rejecting String
  status                String
  date                  DateTime
  serviceprovider       Serviceprovider @relation(fields: [serviceprovider_id], references: [serviceprovider_id])
  serviceprovider_id    String
  customer              Customer        @relation(fields: [customer_id], references: [customer_id])
  customer_id           String
  service               service         @relation(fields: [service_id], references: [service_id])
  service_id            String
}